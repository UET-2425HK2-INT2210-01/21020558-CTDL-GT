Bài 1 
Thứ tự tăng dần Big-O 
210, 4logn+2n, 3n+100logn, 4n, 2logn, nlogn, n2+10n, n3, 2n 

Bài 2 
Thuật toán 1: Đệ quy (chia để trị) 
Hàm powerRecursive(n): 
Nếu n = 0 thì trả về 1 
half ← powerRecursive(n / 2) 
Nếu n là số chẵn thì trả về half * half 
Ngược lại trả về 2 * half * half 
Độ phức tạp:  
O(logn) 
Thuật toán 2: Lặp 
Hàm powerIterative(n): 
result ← 1 
Lặp i từ 0 đến n - 1: 
result ← result * 2 
Trả về result 
Độ phức tạp:  
O(n) 

Bài 3 
1. Khởi tạo hàng đợi 
Hàm InitializeQueue(SIZE): 
front ← -1 
rear ← -1 
queue ← mảng có kích thước SIZE 
Độ phức tạp: O(1) 
2. Kiểm tra hàng đợi có rỗng không 
Hàm IsEmpty(): 
Nếu front = -1 hoặc front > rear thì trả về True 
Ngược lại trả về False 
Độ phức tạp: O(1) 
3. Kiểm tra hàng đợi có đầy không 
Hàm IsFull(SIZE): 
Nếu rear = SIZE - 1 thì trả về True 
Ngược lại trả về False 
Độ phức tạp: O(1) 
4. Thêm phần tử vào hàng đợi 
Hàm Enqueue(queue, SIZE, value): 
Nếu IsFull(SIZE) thì hiển thị "Queue đầy, không thể thêm!" 
Nếu IsEmpty() thì front ← 0 
rear ← rear + 1 
queue[rear] ← value 
Độ phức tạp: O(1) 
5. Xóa  phần tử khỏi hàng đợi 
Hàm Dequeue(queue): 
Nếu IsEmpty() thì hiển thị "Queue rỗng, không thể xóa!" 
value ← queue[front] 
front ← front + 1 
Nếu front > rear thì front ← -1, rear ← -1 (đặt lại queue rỗng) 
Trả về value 
Độ phức tạp: O(1) 
6. Xem phần tử đầu tiên của hàng đợi 
Hàm Front(queue): 
Nếu IsEmpty() thì hiển thị "Queue rỗng!" 
Ngược lại trả về queue[front] 
Độ phức tạp: O(1) 

Bài 4 
1. Khai báo cấu trúc dữ liệu hàng đợi 
Cấu trúc Node: 
data 
next 
Cấu trúc Queue: 
front ← NULL  // con trỏ đầu hàng đợi 
rear ← NULL   // con trỏ cuối hàng đợi 
Độ phức tạp: O(1) 
2. Kiểm tra hàng đợi có rỗng không 
Hàm IsEmpty(): 
Nếu front = NULL thì trả về True 
Ngược lại trả về False 
Độ phức tạp: O(1) 
3. Thêm phần tử vào hàng đợi 
Hàm Enqueue(queue, value): 
node mới ← Node(value) 
node mới.next ← NULL 
Nếu queue.rear = NULL: 
queue.front ← node mới 
queue.rear ← node mới 
Ngược lại: 
queue.rear.next ← node mới 
queue.rear ← node mới 
Độ phức tạp: O(1) 
4. Xóa phần tử khỏi hàng đợi 
Hàm Dequeue(queue): 
Nếu IsEmpty() thì hiển thị "Queue rỗng, không thể xóa!" 
node tạm thời ← queue.front 
queue.front ← queue.front.next 
Nếu queue.front = NULL thì queue.rear ← NULL (reset queue rỗng) 
Xóa node tạm thời 
Độ phức tạp: O(1) 
5. Lấy giá trị đầu tiên của hàng đợi 
Hàm Front(queue): 
Nếu IsEmpty() thì hiển thị "Queue rỗng!" 
Ngược lại trả về queue.front.data 
Độ phức tạp: O(1) 

Bài 5 
1. Khởi tạo ngăn xếp 
Hàm InitializeStack(SIZE): 
top ← -1 
stack ← mảng có kích thước SIZE 
Độ phức tạp: O(1) 
2. Kiểm tra ngăn xếp có rỗng không 
Hàm IsEmpty(): 
Nếu top = -1 thì trả về True 
Ngược lại trả về False\ 
Độ phức tạp: O(1) 
3. Kiểm tra ngăn xếp có đầy không 
Hàm IsFull(SIZE): 
Nếu top = SIZE - 1 thì trả về True 
Ngược lại trả về False 
Độ phức tạp: O(1) 
4. Thêm phần tử vào ngăn xếp 
Hàm Push(stack, SIZE, value): 
Nếu IsFull(SIZE) thì hiển thị "Stack đầy, không thể thêm!" 
Ngược lại: 
top ← top + 1 
stack[top] ← value 
Độ phức tạp: O(1) 
5. Xóa phần tử khỏi ngăn xếp 
Hàm Pop(stack): 
Nếu IsEmpty() thì hiển thị "Stack rỗng, không thể xóa!" 
Ngược lại: 
value ← stack[top] 
top ← top - 1 
Trả về value 
Độ phức tạp: O(1) 
6. Xem phần tử đầu ngăn xếp 
Hàm Peek(stack): 
Nếu IsEmpty() thì hiển thị "Stack rỗng!" 
Ngược lại trả về stack[top] 
Độ phức tạp: O(1) 

Bài 6 
1. Khai báo cấu trúc dữ liệu ngăn xếp 
Cấu trúc Node: 
data 
next 
Cấu trúc Stack: 
top ← NULL  // Con trỏ đầu ngăn xếp 
Độ phức tạp: O(1) 
2. Kiểm tra ngăn xếp có rỗng không 
Hàm IsEmpty(): 
Nếu top = NULL thì trả về True 
Ngược lại trả về False 
Độ phức tạp: O(1) 
3. Thêm phần tử vào ngăn xếp 
Hàm Push(stack, value): 
node mới ← Node(value) 
node mới.next ← stack.top 
stack.top ← node mới 
Độ phức tạp: O(1) 
4. Xóa phần tử khỏi ngăn xếp 
Hàm Pop(stack): 
Nếu IsEmpty() thì hiển thị "Stack rỗng, không thể xóa!" 
node tạm thời ← stack.top 
stack.top ← stack.top.next 
Xóa node tạm thời 
Độ phức tạp: O(1) 
5. Xem phần tử đầu ngăn xếp 
Hàm Peek(stack): 
Nếu IsEmpty() thì hiển thị "Stack rỗng!" 
Ngược lại trả về stack.top.data 
Độ phức tạp: O(1) 
